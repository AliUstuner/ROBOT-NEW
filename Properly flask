from flask import Flask, render_template, Response, request
import cv2
import serial
import time
import numpy as np

app = Flask(__name__)

# Serial connection to Arduino
arduino = serial.Serial('/dev/ttyACM0', 9600)
time.sleep(2)

# Camera initialization
front_cam = cv2.VideoCapture('/dev/video2')
rear_cam = cv2.VideoCapture('/dev/video1')

# Set higher resolution for both cameras
for cam in [front_cam, rear_cam]:
    cam.set(cv2.CAP_PROP_FRAME_WIDTH, 640)
    cam.set(cv2.CAP_PROP_FRAME_HEIGHT, 480)

# Log camera status
print("Front Camera Opened:", front_cam.isOpened())
print("Rear Camera Opened:", rear_cam.isOpened())

# Default speed
current_speed = 150

@app.route('/')
def index():
    return render_template('index.html', speed=current_speed)

@app.route('/command', methods=['POST'])
def command():
    global current_speed
    cmd = request.form['cmd']
    speed = request.form.get('speed', current_speed)
    
    try:
        speed = int(speed)
        current_speed = speed
    except ValueError:
        speed = current_speed

    if cmd in ['F', 'B', 'L', 'R', 'S']:
        message = f"{cmd}:{speed}\n"
        print(f"Sending: {message.strip()}")
        arduino.write(message.encode())

    return ('', 204)

def gen_frames(camera):
    while True:
        success, frame = camera.read()
        if not success:
            # If camera read fails, send placeholder
            frame = 255 * np.ones((240, 320, 3), dtype=np.uint8)
            cv2.putText(frame, "Camera Not Found", (10, 120), cv2.FONT_HERSHEY_SIMPLEX, 0.7, (0, 0, 255), 2)
        else:
            frame = cv2.flip(frame, 1)

        _, buffer = cv2.imencode('.jpg', frame)
        frame_bytes = buffer.tobytes()

        yield (b'--frame\r\n'
               b'Content-Type: image/jpeg\r\n\r\n' + frame_bytes + b'\r\n')

@app.route('/video_feed_front')
def video_feed_front():
    return Response(gen_frames(front_cam), mimetype='multipart/x-mixed-replace; boundary=frame')

@app.route('/video_feed_rear')
def video_feed_rear():
    return Response(gen_frames(rear_cam), mimetype='multipart/x-mixed-replace; boundary=frame')

if __name__ == '__main__':
    app.run(host='0.0.0.0', port=5000)
